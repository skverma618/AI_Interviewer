{
  "questions": [
    {
      "id": "prog-001",
      "text": "What is the difference between a list and a tuple in Python?",
      "topic": "programming",
      "difficulty": 2,
      "expected_answer": "Lists are mutable (can be changed after creation) while tuples are immutable (cannot be changed). Lists use square brackets [] and tuples use parentheses (). Lists have methods like append(), remove(), etc., while tuples have fewer methods.",
      "follow_up_questions": ["Can you give an example of when you would use a tuple instead of a list?"]
    },
    {
      "id": "prog-002",
      "text": "Explain the concept of object-oriented programming and its main principles.",
      "topic": "programming",
      "difficulty": 3,
      "expected_answer": "Object-oriented programming (OOP) is a programming paradigm based on objects and classes. The main principles are: 1) Encapsulation - bundling data and methods together, 2) Inheritance - creating new classes based on existing ones, 3) Polymorphism - objects of different types responding to the same interface, 4) Abstraction - hiding complex implementation details.",
      "follow_up_questions": ["Can you provide an example of inheritance in your preferred programming language?"]
    },
    {
      "id": "algo-001",
      "text": "What is the time complexity of binary search and why?",
      "topic": "algorithms",
      "difficulty": 3,
      "expected_answer": "Binary search has O(log n) time complexity. This is because with each comparison, we eliminate half of the remaining elements. In the worst case, we need to divide the array logâ‚‚(n) times to find the target element or determine it doesn't exist.",
      "follow_up_questions": ["What are the prerequisites for using binary search?"]
    },
    {
      "id": "algo-002",
      "text": "Explain the difference between depth-first search (DFS) and breadth-first search (BFS).",
      "topic": "algorithms",
      "difficulty": 4,
      "expected_answer": "DFS explores as far as possible along each branch before backtracking, using a stack (or recursion). BFS explores all neighbors at the current depth before moving to the next level, using a queue. DFS uses less memory but may not find the shortest path. BFS guarantees the shortest path in unweighted graphs but uses more memory.",
      "follow_up_questions": ["In what scenarios would you prefer DFS over BFS?"]
    },
    {
      "id": "js-001",
      "text": "What is the difference between 'let', 'const', and 'var' in JavaScript?",
      "topic": "javascript",
      "difficulty": 2,
      "expected_answer": "'var' has function scope and is hoisted, can be redeclared. 'let' has block scope, is hoisted but not initialized, cannot be redeclared in same scope. 'const' has block scope, must be initialized at declaration, cannot be reassigned (but objects/arrays can be mutated).",
      "follow_up_questions": ["What is hoisting in JavaScript?"]
    },
    {
      "id": "js-002",
      "text": "Explain closures in JavaScript with an example.",
      "topic": "javascript",
      "difficulty": 4,
      "expected_answer": "A closure is a function that has access to variables in its outer (enclosing) scope even after the outer function has returned. Example: function outer(x) { return function inner(y) { return x + y; }; } const add5 = outer(5); add5(3) returns 8. The inner function 'remembers' the value of x.",
      "follow_up_questions": ["What are some practical uses of closures?"]
    },
    {
      "id": "web-001",
      "text": "What is the difference between HTTP and HTTPS?",
      "topic": "web_development",
      "difficulty": 2,
      "expected_answer": "HTTP (HyperText Transfer Protocol) is unsecured and data is transmitted in plain text. HTTPS (HTTP Secure) adds SSL/TLS encryption, ensuring data is encrypted during transmission. HTTPS provides authentication, data integrity, and confidentiality. Modern browsers mark HTTP sites as 'not secure'.",
      "follow_up_questions": ["What is SSL/TLS and how does it work?"]
    },
    {
      "id": "web-002",
      "text": "Explain the difference between GET and POST HTTP methods.",
      "topic": "web_development",
      "difficulty": 2,
      "expected_answer": "GET requests data from a server, parameters are in URL, limited data size, cacheable, idempotent (safe to repeat). POST sends data to server, parameters in request body, larger data size, not cacheable by default, not idempotent (may have side effects). GET for retrieving data, POST for creating/updating data.",
      "follow_up_questions": ["What are some other HTTP methods and their purposes?"]
    },
    {
      "id": "db-001",
      "text": "What is the difference between SQL and NoSQL databases?",
      "topic": "databases",
      "difficulty": 3,
      "expected_answer": "SQL databases are relational, use structured schemas, ACID compliant, use SQL query language, vertically scalable. Examples: MySQL, PostgreSQL. NoSQL databases are non-relational, flexible schemas, eventually consistent, use various query methods, horizontally scalable. Types include document (MongoDB), key-value (Redis), column-family (Cassandra), graph (Neo4j).",
      "follow_up_questions": ["When would you choose NoSQL over SQL?"]
    },
    {
      "id": "db-002",
      "text": "Explain database normalization and its benefits.",
      "topic": "databases",
      "difficulty": 4,
      "expected_answer": "Database normalization is organizing data to reduce redundancy and improve data integrity. Benefits include: eliminating duplicate data, reducing storage space, ensuring data consistency, easier maintenance. Common forms: 1NF (atomic values), 2NF (no partial dependencies), 3NF (no transitive dependencies). Trade-off: normalized databases may require more complex queries with joins.",
      "follow_up_questions": ["What is denormalization and when might you use it?"]
    }
  ]
}